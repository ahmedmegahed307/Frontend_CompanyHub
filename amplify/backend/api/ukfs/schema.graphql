type Signature {
  id: ID!
  name: String
  position: String
  user_id: String
  date: AWSDateTime
  img: String
}

type UserType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  isActive: Boolean
}

type JobTypesList @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  subTypeList: [String]
  isActive: Boolean
}

type ResolutionItem {
  text: String
  date: AWSDateTime
  userId: String
}

type Resolutions @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  isActive: Boolean
}

type Address {
  name: String
  address1: String
  address2: String
  tel: String
  contactName: String
  email: String
  contactType: String
  city: String
  country: String
  postcode: String
  long: String
  lat: String
}

type JobType {
  name: String
  subtype_id: String
  subType: String
  id: ID
}

type StatusList @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  isActive: String
}

type Part {
  name: String
  quantity: String
  cost: String
  code: String
}

type Jobs @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: JobType
  proirty: String
  enginer: [String]
  status: String
  schadule: AWSDateTime
  estDuration: String
  disc: String
  notifyClint: Boolean
  getBill: Boolean
  bill: String
  contractId: String
  Instruction: String
  JobParts: Part
  partsFiles: [String]
  jobNumber: String
  usersID: ID! @index(name: "byUsersObject")
  JobsEngs: [UsersObject] @manyToMany(relationName: "JobsUsersObject")
  adress: Address
  resolutions: [ResolutionItem]
  signatures: [Signature]
}

type UsersObject @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  email: String
  adresses: [Address]
  JobsClint: [Jobs] @hasMany(indexName: "byUsersObject", fields: ["id"])
  jobss: [Jobs] @manyToMany(relationName: "JobsUsersObject")
  type: String
}
 